X frustum culling
X frame timer
X imgui 
X block types
X greedy meshing?
Z compute or geo shader for voxel generation?
	- https://medium.com/@calebleak/quads-all-the-way-down-simple-voxel-rendering-fea1e4488e26
X threading
X skybox rendering
X LODing? depends on approach
X some way of seeing chunk borders
X chunk unloading
X maybe look into octrees again? 
	- https://www.reddit.com/r/VoxelGameDev/comments/u1uqth/my_first_attempt_to_create_an_octree_based_lod/
X world deletion for hot reloading world parameters
X try out VerySleepy or Tracy profilers
X if we generate neighboring voxels one block out on each side for our current chunk, we can avoid the entire collecting neighbor refs phase and all the pains that come with that. could just immediately generate meshes after chunk generation too...
Z could you actually split each voxel mesh into 6 pieces based on normal during generation, and then only render the sets that face the camera?
V we are holding a shit ton of data around for empty/full chunks. could optimize?
X switch thread pool to using condition variables.
V get mempool working
X generate lod chunks while lower lods are still loaded so that we dont have any popping between generation
X one global index buffer or some other indexed render solution
	- procedural indices generated in vertex buffer
X optimize vertex data
V collision
- all things rendering
	- lighting
	- shadows
	- TAA
- switch to rle?
- use profiler for checking cache misses
- separate update and render into threads
- clean up exit
- copy shaders/assets into build folder using cmake 
	https://copyprogramming.com/howto/copying-assets-directory-from-source-to-build-directory-in-cmake
- biomes
- water
- delete all gl resources on exit
- make IMGUI_DEBUG define in cmake lists
- move culling to a thread. get out of render loop. sort culled chunks
- occlusion culling
- figure out how to fix seams between LODs. need to generate out more voxels than needed on higher LOD's?
- LOD dithering? or pop buffers? probably just between first couple LODs
- put octree stuff on a thread? doesnt even need to run every frame. just when we move. dont need results immediately even.
- octree frustum culling
- fix greedy meshing
- generate skirts to fix LOD seems
- can we stop generating certain terrain features like caves past a certain LOD level?
- cave generation
- still some memory leak. test in debug with low LOD count.
- assign priorities to chunk gen based on LOD
- mempool chunks in Octree
- throw some more functionality into GX
- level saving
- separate physics stuff out into physics.cpp
- 3D texture model loading.