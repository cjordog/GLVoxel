X frustum culling
- cave generation
X frame timer
X imgui 
X block types
- all things rendering
	- lighting
	- shadows
	- TAA
- greedy meshing?
- switch to rle?
- compute or geo shader for voxel generation?
X threading
- use profiler for checking cache misses
- skybox rendering
X LODing? depends on approach
- separate update and render into threads
X some way of seeing chunk borders
- clean up exit
- copy shaders/assets into build folder using cmake 
	https://copyprogramming.com/howto/copying-assets-directory-from-source-to-build-directory-in-cmake
X chunk unloading
X maybe look into octrees again? 
	- https://www.reddit.com/r/VoxelGameDev/comments/u1uqth/my_first_attempt_to_create_an_octree_based_lod/
- biomes
- collision
- water
X - world deletion for hot reloading world parameters
- delete all gl resources on exit
- make IMGUI_DEBUG define in cmake lists
X - try out VerySleepy or Tracy profilers
X if we generate neighboring voxels one block out on each side for our current chunk, we can avoid the entire collecting neighbor refs phase and all the pains that come with that. could just immediately generate meshes after chunk generation too...
- move culling to a thread. get out of render loop. sort culled chunks
- occlusion culling
- could you actually split each voxel mesh into 6 pieces based on normal during generation, and then only render the sets that face the camera?
- we are holding a shit ton of data around for empty/full chunks. could optimize?
- switch thread pool to using condition variables.
- get mempool working
- generate lod chunks while lower lods are still loaded so that we dont have any popping between generation
- figure out how to fix seems between LODs. need to generate out more voxels than needed on higher LOD's?
- LOD dithering? or pop buffers? probably just between first couple LODs
- put octree stuff on a thread? doesnt even need to run every frame. just when we move. dont need results immediately even.
- octree frustum culling