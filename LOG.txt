Sept 2022
- updating from one VAO per chunk to one VAO for all chunks gave insane perf improvements	
	- 20m triangles at ~50 frames to ~140 frames
	- change from glVertexAttribPointer to glVertexAttribFormat/Binding
		- learnOpengl uses the former. realllllly outdated
- change from waiting for neighbor chunks to generate mesh and instead generate one extra row on each side. allows us to get rid of a lot of threading issues. cleaned up code. no more waiting on locks. way fewer callbacks. null bounds checks on mesh gen gone.
	- speedup from ~0.4 to 0.2s per chunk generated
- initial octree implementation. hashmap too slow once theres hundreds of thousands of elements. and convenient way to handle LOD

Oct 2022
- finally got octrees working. really good results. didnt get it working with mempools. will have to solve that problem. can probably slim down size of chunk.

Nov 2022
- Octree perf improvements
- tried messing around with splitting vertex buffers by face. perf seems to be much worse when rendering all faces normally (900 -> 600 fps)
	- and with removing backfaces perf was also worse, by maybe 25%. and theres also issues with the dot product not working on edges of screen do to projection matrix not being orthographic
- vertex packing insane perf improvements. total memory reduction around 75%. individual vertex data 1/12 the size. framerate improvements likely do to better cache locality.