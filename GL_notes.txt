- VBO
	- actual buffer for vertex data

- vertex attribute
	- one  thing that a vertex has in data
		- ie position, normal, uv, etc
	- set via glVertexAttribPointer, glEnableVertexAttribArray
		- should have vao,vbo,ebo bound before calling these

- VAO
	- stores vertex attribute calls
	- more specifically stores
		- Calls to glEnableVertexAttribArray or glDisableVertexAttribArray.
		- Vertex attribute configurations via glVertexAttribPointer.
		- Vertex buffer objects associated with vertex attributes by calls to glVertexAttribPointer.

- EBO (element buffer object)
	- index buffer
	- use glDrawElements instead of glDrawArrays

- setting up buffers
	- glGenBuffers 	(glGenVertexArrays)
	- glBindBuffer	(glBindVertexArray)
	- glBufferData


- Textures
	- glGenTextures
	- glBindTexture
	- glTexImage2D
	- (glgenerateMipMap)

	- glTexParameteri works on currently bound texture
	- texture filtering can be set separately for both magnifying and minifying operations (scaling up or down)
	- texture unit is the location of a texture
		- glActiveTexture(textureUnit) activates that texture unit
		- subsequent bind binds to that unit

- GLSL
	- explicit uniform locations
		- use #extension GL_ARB_explicit_uniform_location : enable
		- It is illegal to assign the same uniform location to two uniforms in the same shader or the same program
			- vertex attributes are not included in this, they use separate locations

- GLAD
	- function loader for opengl

- GLFW
	- window manager for opengl

Coordinate systems
	- local space -> model(world) matrix
	- world space -> view matrix
	- view space -> proj matrix
	- clip space (-1 to 1) (Normalized Device Coordinates) -> viewport transform (defined by glViewPort)
	- screen space (0 to 1)
	- opengl uses right handed coords, y-up, -z forward
		- uses left handed after switching to NDC, proj matrix switches z dir, and handedness


Lighting
	- diffuse is n dot l
	- using non uniform scales with normal vectors(or other direction vectors) can cause distortion.
		- you want to either not use non-uniform scale, or use the transpose of the inverse of the top 3x3 of the model matrix
			- http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/
			- but dont do inverses in the shader, really expensive
		- and for direction vectors, just use 3x3 transform, dont need translation
	- spec is L reflected over n, dotted with viewDir
	- naive lighting calcuation = (spec + diff + amb) * objColor
		- can separate each light term into spec = light.spec * mat.spec * specVal for more control